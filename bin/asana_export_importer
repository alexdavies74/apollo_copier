#!/usr/bin/env node

var aei = require("../lib/asana_export_importer");
var docopt = require("docopt").docopt;
var fs = require("fs");
var path = require("path");

binName = path.basename(process.argv[1]);

exports.doc =
"Usage:\n"+
"  " + binName + " --pat=<pat>... --organization=<id> [options] <path>\n" +
"  " + binName + " --help\n" +
"  " + binName + " --version\n" +
"\n" + 
"Options:\n" + 
"  --importer=<type>     Export source type [default: asana_export].\n" + 
"  --organization=<id>   Asana organization ID.\n" +
"  --pat=<pat>...       Asana Personal Access Tokens\n" +
"  --api-endpoint=<url>  Asana API endpoint [default: " + aei.asana.Dispatcher.ROOT_URL + "]\n" +
"  --attachments=<file>  Attachments file to write to, relative to the databases directory [default: attachments.json]\n" +
"  --databases=<dir>     Base directory for temporary databases [default: construct_from_path_and_org]\n" +
"  --resumable=<bool>    Enable resuming [default: true]\n" +
"  --retries=<count>     Maximum number of times to retry (0 = no retry) [default: 5]\n" +
"  --retry-delay=<ms>    Milliseconds to wait before retrying [default: 500]\n" +
"  --retry-backoff=<n>   Backoff factor (total_delay = retry_delay * retry_backoff ^ attempt_number) [default: 2]\n" +
"  --concurrency=<n>     Concurrent API requests [default: 1000]\n" +
"  --batch-size=<n>      Export item fetch batch size [default: 100]\n" +
"  --dry-run             Run the import without making API calls\n" +
"  --simulate-latency=<n,m> Insert a delay when doing a dry run to simulate API call latency ('milliseconds[,standard_deviation]') [default: 0,0]"
"  -h --help             Show this screen.\n" + 
"  --version             Show version."

exports.parseOptions = function() {
	var opts = docopt(exports.doc, { version: '0.0.1' });
	var latencyComponents = (opts["--simulate-latency"] || "").split(",");
	return {
		path: opts["<path>"],
		module: opts["--importer"],
		organization: parseInt(opts["--organization"], 10),
    pats: opts["--pat"],
		apiEndpoint: opts["--api-endpoint"],
		attachmentsPath: opts["--attachments"],
		databasesPath: opts["--databases"],
		retries: parseInt(opts["--retries"], 10),
		retryDelay: parseInt(opts["--retry-delay"], 10),
		retryBackoff: parseInt(opts["--retry-backoff"], 10),
		resumable: opts["--resumable"] === "true",
		concurrency: parseInt(opts["--concurrency"], 10),
		batchSize: parseInt(opts["--batch-size"], 10),
		dryRun: opts["--dry-run"],
		latencyMean: parseFloat(latencyComponents[0] || "0"),
		latencyStdev: parseFloat(latencyComponents[1] || "0"),
	}
}

exports.initApp = function(options) {
	if (options.module === "asana_export") {
		var ExportImplementation = require("../lib/asana_export").ExportImplementation; 
	} else {
		var ExportImplementation = require(options.module).ExportImplementation;
	}

	if (ExportImplementation == undefined) {
		console.log("Missing 'ExportImplementation' in module '" + options.module + "'");
		process.exit(1);
	}

	if (options.apiEndpoint !== aei.asana.Dispatcher.ROOT_URL) {
		console.log("Setting API endpoint to " + options.apiEndpoint);
		aei.asana.Dispatcher.ROOT_URL = options.apiEndpoint;
	}

	var app = aei.App.shared();

	app.importer().setExport(ExportImplementation.clone());
	app.importer().setOrganizationId(options.organization);
	app.importer().setConcurrency(options.concurrency);
	
	require("http").globalAgent.maxSockets = options.concurrency;
	require("https").globalAgent.maxSockets = options.concurrency;

	var databasesPath = options.databasesPath;
	if (databasesPath === "construct_from_path_and_org") {
        databasesPath = "db-" + path.basename(options.path) + "-" + options.organization;
        console.log("Using databases path: " + databasesPath);
	}

	if (!fs.existsSync(databasesPath)){
        fs.mkdirSync(databasesPath);
    }

	app.importer().export().setPath(options.path);
	app.importer().export().setBatchSize(options.batchSize);
	app.importer().export().setDbDirectory(databasesPath);

	app.sourceToAsanaMap().setDbPath(databasesPath + "/mapping.sqlite");
	app.sourceToAsanaMap().setReadOnly(options.dryRun);

	app.setAttachmentsPath(databasesPath + "/" + options.attachmentsPath);

	if (options.dryRun) {
		var apiClient = aei.AsanaClientMock.clone();
		apiClient.setLatencyMean(options.latencyMean);
		apiClient.setLatencyStdev(options.latencyStdev);
		app.addClient(-1, apiClient);
	} else {
		options.pats.forEach(function(pat) {
			// aei.asana.oauth is broken for this version of the API so manually create
			var apiClient = new aei.asana.Client(new aei.asana.Dispatcher('auth', {bearer: pat}));

			var user;
			if (pat === "key") {
				// Magic value used in tests
				user = {
					id: 1234
				};
			} else {
				try {
					user = aei.Future.withPromise(apiClient.users.me()).wait();
					console.log("Got PAT for " + user.id + ": " + user.name + "  " + pat);
				} catch (e) {
					console.log("Could not get user for PAT " + pat, e);
				}
			}

			if (options.retries > 0) {
				var clientRetry = aei.AsanaClientRetry.clone();
                clientRetry.setClient(apiClient);
				clientRetry.setRetries(options.retries);
				clientRetry.setBackoff(options.retryBackoff);
				clientRetry.setDelay(options.retryDelay);
				apiClient = clientRetry;
			}

			if (options.resumable) {
				var clientCache = aei.AsanaClientCache.clone();
				clientCache.setClient(apiClient);
				clientCache.setDbPath(databasesPath + "/cache" + user.id + ".sqlite");
				clientCache.setReadOnly(options.dryRun);
				apiClient = clientCache;
			}

			app.addClient(user.id, apiClient);
			// Last user is also default
			app.addClient(-1, apiClient);
		});
	}

	return app;
}

exports.main = function() {
	aei.Future.task(function() {
		var options = exports.parseOptions();
		var app = exports.initApp(options);
		app.start().resolve(function (err) {
			if (err) {
				console.log(err.stack || err);
				process.exit(1);
			}
		});
	});
}

if (require.main === module) {
	exports.main();
}
